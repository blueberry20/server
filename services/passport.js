const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = reqire('mongoose');
const keys = require("../config/keys.js");
//now keys is an object that has googleClientID and googleClientSecret properties

//create user model class
//fetch users from mongoose
const User = mongoose.model('users');

//user wk=ill be serialized and passport will insert it into a cookie
passport.serializeUser((user, done) => {
    //user.id is taken from db collection, it was generated by mongodb automatically (id is shortcut to _id.$old)
    done(null, user.id);
});

//now we are turning the id into a mongoose model instance
//once we find the user, call done
passport.deserializeUser((id, done)=> {
    User.findById(id)
    .then(user => {
        done(null, user)
    });
})

//callbackURL is the route the user will be sent after they grant permissions to our application
//later we need to add a route handler to handle url in callbackURL when user comes back to our application
//this is the first part of our auth when we send user to Google server and he comes back to us after granting permission
passport.use(new GoogleStrategy({
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback'
}, (accessToken, refreshToken, profile, done) => {
    //console logs to terminal window
    // console.log('accessToken ', accessToken);
    // console.log('refreshToken ', refreshToken);
    // console.log('profile: ', profile);

        //look up if this googleId exists
        //this query returns a promise
        User.findOne({googleId: profile.id})
            .then((existingUser)=>{
                if (existingUser){
                    //if it's not null, we have a record 
                    //we need to say that we are done
                    //1st arguments is error, second - return user
                    done(null, existingUser);
                } 
                else {
                    //creates a new mangoose instance of user
                    //save will save it to DB
                    //in the callback we get another model instance (user) - which we use(more recent)
                    new User({googleId: profile.id})
                    .save()
                    .then(user => done(null, existingUser));
                }
            })

    })
);
